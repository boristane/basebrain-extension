var background=function(){"use strict";var w,B;function T(o){return o==null||typeof o=="function"?{main:o}:o}const l=(B=(w=globalThis.browser)==null?void 0:w.runtime)!=null&&B.id?globalThis.browser:globalThis.chrome,A=T(()=>{console.log("Basebrain background script initialized",{id:l.runtime.id}),l.action.onClicked.addListener(async o=>{o.id&&await l.tabs.sendMessage(o.id,{action:"toggleSidebar"})}),l.runtime.onMessage.addListener((o,t,e)=>{if(o.action==="checkAuth")return m().then(e),!0;if(o.action==="saveMemory")return v(o.payload).then(e),!0;if(o.action==="updateMemoryNotes")return I(o.memoryId,o.notes,o.workspaceId).then(e),!0}),l.runtime.onInstalled.addListener(()=>{console.log("Basebrain extension installed")})});async function m(){try{console.log("Background: Checking authentication...");const o=await l.cookies.getAll({url:"https://basebrain.ai"});console.log("Background: All cookies found for basebrain.ai:",o.map(r=>({name:r.name,domain:r.domain,path:r.path,value:r.value.substring(0,20)+"..."})));let t=o.find(r=>r.name==="auth_session"),e=o.find(r=>r.name==="workspace_id");if(!t||!e){const n=(await l.cookies.getAll({})).filter(a=>a.domain.includes("basebrain.ai")||a.domain===".basebrain.ai"||a.domain==="basebrain.ai");console.log("Background: Basebrain cookies found:",n.map(a=>({name:a.name,domain:a.domain})));const d=n.find(a=>a.name==="auth_session"),g=n.find(a=>a.name==="workspace_id");d&&!t&&(t=d),g&&!e&&(e=g)}const u=(t==null?void 0:t.value)||null,s=(e==null?void 0:e.value)||null,c={isAuthenticated:!!u,authToken:u,workspaceId:s};return console.log("Background: Auth check result:",{isAuthenticated:c.isAuthenticated,hasToken:!!c.authToken,workspaceId:c.workspaceId}),c}catch(o){return console.error("Background: Error checking auth:",o),{isAuthenticated:!1,authToken:null,workspaceId:null}}}async function v(o){var t,e,u,s,c,r;try{console.log("Background: Saving memory..."),o.contents=void 0,console.log("Background: Payload:",o);const n=await m();if(!n.isAuthenticated||!n.authToken)throw new Error("Not authenticated");const d="https://api.basebrain.ai/v1/memories",g={"Content-Type":"application/json",Authorization:`Bearer ${n.authToken}`},a=JSON.stringify(o);console.log("Background: Request URL:",d),console.log("Background: Request headers:",g),console.log("Background: Request body (truncated):",a.substring(0,500)+"...");const h=await fetch(d,{method:"POST",headers:g,body:a});if(console.log("Background: Response status:",h.status),console.log("Background: Response headers:",Object.fromEntries(h.headers.entries())),!h.ok){const b=await h.text();console.error("Background: Error response body:",b);let p={};try{p=JSON.parse(b)}catch{console.error("Background: Could not parse error response as JSON")}throw new Error(`Failed to save: ${h.status} ${h.statusText} - ${((t=p.error)==null?void 0:t.detail)||p.detail||b}`)}const i=await h.json();console.log("Background: Memory saved successfully",i),console.log("Background: Full response data:",JSON.stringify(i,null,2)),console.log("Background: Data keys:",Object.keys(i));const y=((e=i.result)==null?void 0:e.id)||i.id||i._id||i.memoryId||((u=i.memory)==null?void 0:u.id)||((s=i.memory)==null?void 0:s._id)||((c=i.data)==null?void 0:c.id)||((r=i.data)==null?void 0:r._id);return console.log("Background: Extracted memory ID:",y),y||(console.error("Background: No memory ID found in response"),console.error("Background: Response structure:",JSON.stringify(i,null,2))),{success:!0,memoryId:y}}catch(n){return console.error("Background: Error saving memory:",n),{success:!1,error:n.message}}}async function I(o,t,e){var u;try{console.log("Background: Updating memory notes..."),console.log("Background: Memory ID:",o),console.log("Background: Workspace ID:",e);const s=await m();if(!s.isAuthenticated||!s.authToken)throw new Error("Not authenticated");const c=e||s.workspaceId;if(!c)throw new Error("Workspace ID not found");const r=`https://api.basebrain.ai/v1/memories/${c}/${o}`;console.log("Background: PATCH URL:",r);const n=await fetch(r,{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:`Bearer ${s.authToken}`},body:JSON.stringify({notes:t})});if(!n.ok){const g=await n.json().catch(()=>({}));throw new Error(`Failed to update notes: ${n.status} ${n.statusText} - ${((u=g.error)==null?void 0:u.detail)||""}`)}const d=await n.json();return console.log("Background: Memory notes updated successfully",d),{success:!0}}catch(s){return console.error("Background: Error updating memory notes:",s),{success:!1,error:s.message}}}function N(){}function k(o,...t){}const $={debug:(...o)=>k(console.debug,...o),log:(...o)=>k(console.log,...o),warn:(...o)=>k(console.warn,...o),error:(...o)=>k(console.error,...o)};let f;try{f=A.main(),f instanceof Promise&&console.warn("The background's main() function return a promise, but it must be synchronous")}catch(o){throw $.error("The background crashed on startup!"),o}return f}();
background;
