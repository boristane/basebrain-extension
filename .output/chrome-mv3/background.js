var background=function(){"use strict";var y,b;function p(o){return o==null||typeof o=="function"?{main:o}:o}const d=(b=(y=globalThis.browser)==null?void 0:y.runtime)!=null&&b.id?globalThis.browser:globalThis.chrome,w=p(()=>{console.log("Basebrain background script initialized",{id:d.runtime.id}),d.action.onClicked.addListener(async o=>{o.id&&await d.tabs.sendMessage(o.id,{action:"toggleSidebar"})}),d.runtime.onMessage.addListener((o,t,e)=>{if(o.action==="checkAuth")return g().then(e),!0;if(o.action==="saveMemory")return B(o.payload).then(e),!0;if(o.action==="updateMemoryNotes")return T(o.memoryId,o.notes).then(e),!0}),d.runtime.onInstalled.addListener(()=>{console.log("Basebrain extension installed")})});async function g(){try{console.log("Background: Checking authentication...");const o=await d.cookies.getAll({url:"https://basebrain.ai"});console.log("Background: All cookies found for basebrain.ai:",o.map(r=>({name:r.name,domain:r.domain,path:r.path,value:r.value.substring(0,20)+"..."})));let t=o.find(r=>r.name==="auth_session"),e=o.find(r=>r.name==="workspace_id");if(!t||!e){const l=(await d.cookies.getAll({})).filter(a=>a.domain.includes("basebrain.ai")||a.domain===".basebrain.ai"||a.domain==="basebrain.ai");console.log("Background: Basebrain cookies found:",l.map(a=>({name:a.name,domain:a.domain})));const c=l.find(a=>a.name==="auth_session"),i=l.find(a=>a.name==="workspace_id");c&&!t&&(t=c),i&&!e&&(e=i)}const s=(t==null?void 0:t.value)||null,n=(e==null?void 0:e.value)||null,u={isAuthenticated:!!s,authToken:s,workspaceId:n};return console.log("Background: Auth check result:",{isAuthenticated:u.isAuthenticated,hasToken:!!u.authToken,workspaceId:u.workspaceId}),u}catch(o){return console.error("Background: Error checking auth:",o),{isAuthenticated:!1,authToken:null,workspaceId:null}}}async function B(o){var t,e,s;try{console.log("Background: Saving memory..."),o.contents=void 0,console.log("Background: Payload:",o);const n=await g();if(!n.isAuthenticated||!n.authToken)throw new Error("Not authenticated");const u="https://api.basebrain.ai/v1/memories",r={"Content-Type":"application/json",Authorization:`Bearer ${n.authToken}`},l=JSON.stringify(o);console.log("Background: Request URL:",u),console.log("Background: Request headers:",r),console.log("Background: Request body (truncated):",l.substring(0,500)+"...");const c=await fetch(u,{method:"POST",headers:r,body:l});if(console.log("Background: Response status:",c.status),console.log("Background: Response headers:",Object.fromEntries(c.headers.entries())),!c.ok){const k=await c.text();console.error("Background: Error response body:",k);let f={};try{f=JSON.parse(k)}catch{console.error("Background: Could not parse error response as JSON")}throw new Error(`Failed to save: ${c.status} ${c.statusText} - ${((t=f.error)==null?void 0:t.detail)||f.detail||k}`)}const i=await c.json();console.log("Background: Memory saved successfully",i),console.log("Background: Extracting memory ID from:",{id:i.id,_id:i._id,memoryId:i.memoryId});const a=i.id||i._id||i.memoryId||((e=i.memory)==null?void 0:e.id)||((s=i.memory)==null?void 0:s._id);return console.log("Background: Returning memory ID:",a),{success:!0,memoryId:a}}catch(n){return console.error("Background: Error saving memory:",n),{success:!1,error:n.message}}}async function T(o,t){var e;try{console.log("Background: Updating memory notes...");const s=await g();if(!s.isAuthenticated||!s.authToken)throw new Error("Not authenticated");const n=await fetch(`https://api.basebrain.ai/v1/memories/${o}`,{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:`Bearer ${s.authToken}`},body:JSON.stringify({notes:t})});if(!n.ok){const r=await n.json().catch(()=>({}));throw new Error(`Failed to update notes: ${n.status} ${n.statusText} - ${((e=r.error)==null?void 0:e.detail)||""}`)}const u=await n.json();return console.log("Background: Memory notes updated successfully",u),{success:!0}}catch(s){return console.error("Background: Error updating memory notes:",s),{success:!1,error:s.message}}}function I(){}function m(o,...t){}const A={debug:(...o)=>m(console.debug,...o),log:(...o)=>m(console.log,...o),warn:(...o)=>m(console.warn,...o),error:(...o)=>m(console.error,...o)};let h;try{h=w.main(),h instanceof Promise&&console.warn("The background's main() function return a promise, but it must be synchronous")}catch(o){throw A.error("The background crashed on startup!"),o}return h}();
background;
